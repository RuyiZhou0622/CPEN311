                    ; KCPSM3 Program - Practice Picoblaze on Spartan-3A Starter Kit.
                    ;
                    ;
                    ;
                    ;
                    ; The 8 LEDs provide a simple 'heart beat' counter driven by interrupts generated at
                    ; one second intervals.
                    ;
                    ;
                    ;**************************************************************************************
                    ; Port definitions
                    ;**************************************************************************************
                    ;
                    ;
                    ;
                    CONSTANT LED_port, 80               ;8 simple LEDs. Is an OUTPUT port.
			        CONSTANT DATA_IN_PORT, 00	        ;input data port. this is an INPUT port.
                    CONSTANT SSEG_PORT0, 40
					CONSTANT SSEG_PORT1, 20
					CONSTANT SSEG_PORT2, 10

                    ;//////define the port for the LED[0]
                    CONSTANT LED_heartbeat, 08
                 
                
                    ;**************************************************************************************
                    ; Special Register usage
                    ;**************************************************************************************
                    ;
                    ; No registers are given special names in this program.
                    ;
                    ;**************************************************************************************
                    ; Scratch Pad Memory Locations
                    ;**************************************************************************************
                    ;
                    ;
                    CONSTANT ISR_preserve_s0, 00        ;Preserve s0 contents during ISR
                    CONSTANT ISR_preserve_s1, 01        ;Preserve s1 contents during ISR
                    CONSTANT ISR_preserve_s2, 02        ;Preserve s2 contents during ISR
                    CONSTANT ISR_preserve_s3, 03        ;Preserve s3 contents during ISR
                    ;
                    CONSTANT LED_pattern, 04            ;remember state of LEDs (8-bit counter in this case)
                    CONSTANT counter, 05
                    CONSTANT hold_carry, 06
                    CONSTANT hold_sum, 07
                   
                    ;
                    ;**************************************************************************************
                    ; Useful data constants
                    ;**************************************************************************************
                    ;
                    ;
                    ; Constant to define a software delay of 1us. This must be adjusted to reflect the
                    ; clock applied to KCPSM3. Every instruction executes in 2 clock cycles making the
                    ; calculation highly predictable. The '6' in the following equation even allows for
                    ; 'CALL delay_1us' instruction in the initiating code.
                    ;
                    ; delay_1us_constant =  (clock_rate - 6)/4       Where 'clock_rate' is in MHz
                    ;
                    ; Example: For a 50MHz clock the constant value is (50-6)/4 = 11  (0B Hex).
                    ; For clock rates below 10MHz the value of 1 must be used and the operation will
                    ; become lower than intended. Interrupts may effect the timing of software based
                    ; delays.
                    ;
                    CONSTANT delay_1us_constant, 0B
                    ;
                    ;
                    ;
                    ; ASCII table
                    ;
                    CONSTANT character_a, 61
                    CONSTANT character_b, 62
                    CONSTANT character_c, 63
                    CONSTANT character_d, 64
                    CONSTANT character_e, 65
                    CONSTANT character_f, 66
                    CONSTANT character_g, 67
                    CONSTANT character_h, 68
                    CONSTANT character_i, 69
                    CONSTANT character_j, 6A
                    CONSTANT character_k, 6B
                    CONSTANT character_l, 6C
                    CONSTANT character_m, 6D
                    CONSTANT character_n, 6E
                    CONSTANT character_o, 6F
                    CONSTANT character_p, 70
                    CONSTANT character_q, 71
                    CONSTANT character_r, 72
                    CONSTANT character_s, 73
                    CONSTANT character_t, 74
                    CONSTANT character_u, 75
                    CONSTANT character_v, 76
                    CONSTANT character_w, 77
                    CONSTANT character_x, 78
                    CONSTANT character_y, 79
                    CONSTANT character_z, 7A
                    CONSTANT character_A, 41
                    CONSTANT character_B, 42
                    CONSTANT character_C, 43
                    CONSTANT character_D, 44
                    CONSTANT character_E, 45
                    CONSTANT character_F, 46
                    CONSTANT character_G, 47
                    CONSTANT character_H, 48
                    CONSTANT character_I, 49
                    CONSTANT character_J, 4A
                    CONSTANT character_K, 4B
                    CONSTANT character_L, 4C
                    CONSTANT character_M, 4D
                    CONSTANT character_N, 4E
                    CONSTANT character_O, 4F
                    CONSTANT character_P, 50
                    CONSTANT character_Q, 51
                    CONSTANT character_R, 52
                    CONSTANT character_S, 53
                    CONSTANT character_T, 54
                    CONSTANT character_U, 55
                    CONSTANT character_V, 56
                    CONSTANT character_W, 57
                    CONSTANT character_X, 58
                    CONSTANT character_Y, 59
                    CONSTANT character_Z, 5A
                    CONSTANT character_0, 30
                    CONSTANT character_1, 31
                    CONSTANT character_2, 32
                    CONSTANT character_3, 33
                    CONSTANT character_4, 34
                    CONSTANT character_5, 35
                    CONSTANT character_6, 36
                    CONSTANT character_7, 37
                    CONSTANT character_8, 38
                    CONSTANT character_9, 39
                    CONSTANT character_colon, 3A
                    CONSTANT character_stop, 2E
                    CONSTANT character_semi_colon, 3B
                    CONSTANT character_minus, 2D
                    CONSTANT character_divide, 2F       ;'/'
                    CONSTANT character_plus, 2B
                    CONSTANT character_comma, 2C
                    CONSTANT character_less_than, 3C
                    CONSTANT character_greater_than, 3E
                    CONSTANT character_equals, 3D
                    CONSTANT character_space, 20
                    CONSTANT character_CR, 0D           ;carriage return
                    CONSTANT character_question, 3F     ;'?'
                    CONSTANT character_dollar, 24
                    CONSTANT character_exclaim, 21      ;'!'
                    CONSTANT character_BS, 08           ;Back Space command character
                    ;
                    ;
                    ;
                    ;
                    ;
                    ;**************************************************************************************
                    ; Initialise the system
                    ;**************************************************************************************
                    ;
        cold_start: LOAD s0, 00                        
                    STORE s0, LED_pattern
                    OUTPUT s0, LED_port
        
                    ENABLE INTERRUPT                    ;enable the interrupt
            	

					;**************************************************************************************
                    ; Main program
                    ;**************************************************************************************
                    ;
                    ; Display welcome message for design
                    ;

      main_program: CALL delay_1s;
                    ;Make the heart-beat on LED[0]
                    LOAD s0, 01
                    OUTPUT s0, LED_heartbeat
                    CALL delay_1s
                    LOAD s0, 00
                    OUTPUT s0, LED_heartbeat
                    JUMP main_program
	  
       		  
                    ;**************************************************************************************
                    ; Routines to display hexadecimal values 
                    ;**************************************************************************************
                    ;
                    ;
                    ; Convert hexadecimal value provided in register s0 into ASCII characters
                    ;
                    ; The value provided must can be any value in the range 00 to FF and will be converted into
                    ; two ASCII characters.
                    ;     The upper nibble will be represented by an ASCII character returned in register s3.
                    ;     The lower nibble will be represented by an ASCII character returned in register s2.
                    ;
                    ; The ASCII representations of '0' to '9' are 30 to 39 hexadecimal which is simply 30 hex
                    ; added to the actual decimal value. The ASCII representations of 'A' to 'F' are 41 to 46
                    ; hexadecimal requiring a further addition of 07 to the 30 already added.
                    ;
                    ; Registers used s0, s2 and s3.
                    ;
 hex_byte_to_ASCII: LOAD s2, s0                         ;remember value supplied
                    SR0 s0                              ;isolate upper nibble
                    SR0 s0
                    SR0 s0
                    SR0 s0
                    CALL hex_to_ASCII                   ;convert
                    LOAD s3, s0                         ;upper nibble value in s3
                    LOAD s0, s2                         ;restore complete value
                    AND s0, 0F                          ;isolate lower nibble
                    CALL hex_to_ASCII                   ;convert
                    LOAD s2, s0                         ;lower nibble value in s2
                    RETURN
                    ;
                    ; Convert hexadecimal value provided in register s0 into ASCII character
                    ;
                    ;Register used s0
                    ;
      hex_to_ASCII: SUB s0, 0A                          ;test if value is in range 0 to 9
                    JUMP C, number_char
                    ADD s0, 07                          ;ASCII char A to F in range 41 to 46
       number_char: ADD s0, 3A                          ;ASCII char 0 to 9 in range 30 to 40
                    RETURN
                   
                 
                    ;**************************************************************************************
                    ; Software delay routines
                    ;**************************************************************************************
                    ;
                    ; Delay of 1us.
                    ;
                    ; Constant value 'delay_1us_constant' reflects the clock applied to KCPSM3. Every
                    ; instruction executes in 2 clock cycles making the calculation highly predictable.
                    ; The '6' in the following equation allows for the 'CALL delay_1us' instruction used
                    ; in the initiating code. Interrupts may effect software derived delays.
                    ;
                    ; delay_1us_constant =  (clock_rate - 6)/4       Where 'clock_rate' is in MHz
                    ;
                    ; Registers used s0
                    ;
         delay_1us: LOAD s0, delay_1us_constant
          wait_1us: SUB s0, 01
                    JUMP NZ, wait_1us
                    RETURN
                    ;
                    ; Delay of 40us.
                    ;
                    ; Registers used s0, s1
                    ;
        delay_40us: LOAD s1, 28                         ;40 x 1us = 40us
         wait_40us: CALL delay_1us
                    SUB s1, 01
                    JUMP NZ, wait_40us
                    RETURN
                    ;
                    ;
                    ; Delay of 1ms.
                    ;
                    ; Registers used s0, s1, s2
                    ;
         delay_1ms: LOAD s2, 19                         ;25 x 40us = 1ms
          wait_1ms: CALL delay_40us
                    SUB s2, 01
                    JUMP NZ, wait_1ms
                    RETURN
                    ;
                    ; Delay of 20ms.
                    ;
                    ; Delay of 20ms used during initialisation.
                    ;
                    ; Registers used s0, s1, s2, s3
                    ;
        delay_20ms: LOAD s3, 14                         ;20 x 1ms = 20ms
         wait_20ms: CALL delay_1ms
                    SUB s3, 01
                    JUMP NZ, wait_20ms
                    RETURN
					
		delay_100ms: LOAD s3, 64                         ;100 x 1ms = 20ms
         wait_100ms: CALL delay_1ms
                     SUB s3, 01
                     JUMP NZ, wait_100ms
                     RETURN		
					 
				
					
                    ;
                    ; Delay of approximately 1 second.
                    ;
                    ; Registers used s0, s1, s2, s3, s4
                    ;
          delay_1s: LOAD s4, 32                         ;50 x 20ms = 1000ms
           wait_1s: CALL delay_20ms
                    SUB s4, 01
                    JUMP NZ, wait_1s
                    RETURN

                    ;
                    ;
                    ;
                    ;**************************************************************************************
                    ; Interrupt Service Routine (ISR)
                    ;**************************************************************************************
                    ;
                    ; The interrupt is used purely to provide a 1 second heart beat binary counter pattern
                    ; on the 8 LEDs.
                    ;
               ISR: STORE s0, ISR_preserve_s0           
                    STORE s1, ISR_preserve_s1           ;preserve register for the sum
                    STORE s2, ISR_preserve_s2           ;preserve register for audio_data+
                    ;s3 is the second register that handles the carry 8 bits of the sum of the audio data
                    STORE s3, ISR_preserve_s3           ;preserve register for audio_data carry
                
                    FETCH s1, hold_sum           ; get the stored sum_data value
                    FETCH s3, hold_carry         ; get the stored carry value

             while: INPUT s2, DATA_IN_PORT
                    LOAD s7, s2                 
                    AND s7, 80                  ; check the if the most significant bit is 1
                    COMPARE s7, 80
                    CALL Z, find_absolute       ; if MSB is 1, it is an negative data
                    ADD s1, s2                   ;add the data_audio to sum
                    ADDCY s3, 00                 ;the carry bits
                    COMPARE s5, FF               ;check if counter is d'256
                    JUMP Z, end_loop
                    ADD s5, 01                   ;start counting
                 

     end_interrupt: STORE s0, ISR_preserve_s0
                    STORE s1, hold_sum
                    STORE s3, hold_carry
                    FETCH s0, ISR_preserve_s0
                    FETCH s1, ISR_preserve_s1
                    FETCH s2, ISR_preserve_s2
                    FETCH s3, ISR_preserve_s3
                    RETURNI ENABLE

     find_absolute: XOR s2, FF
                    ADD s2, 01
                    RETURN

          end_loop: LOAD s5, 00     ;initialize the counter
                    
                    ;Since s3 is the UPPER 8 bits of the sum, so we only need to compare s3. Becasue
                    ;divided by 256 means shift 8 bits RIGHT

                    COMPARE s3, 80  ; compare with 1000_0000
                    JUMP NC, light_up_eight

                    COMPARE s3, 40  ; compare with 0100_0000
                    JUMP NC, light_up_seven

                    COMPARE s3, 20  ; compare with 0010_0000
                    JUMP NC, light_up_six

                    COMPARE s3, 10  ; compare with 0001_0000
                    JUMP NC, light_up_five

                    COMPARE s3, 08  ; compare with 0000_1000
                    JUMP NC, light_up_four

                    COMPARE s3, 04  ; compare with 0000_0100
                    JUMP NC, light_up_three

                    COMPARE s3, 02  ; compare with 0000_0010
                    JUMP NC, light_up_two

                    COMPARE s3, 01  ; compare with 0000_0001
                    JUMP Z, light_up_one

                    LOAD s0, 00
                    JUMP display_leds
    
    light_up_eight: 
                    LOAD s0, FF     ;1111_1111
                    JUMP display_leds
    light_up_seven:
                    LOAD s0, FE     ;1111_1110
                    JUMP display_leds
    light_up_six:
                    LOAD s0, FC     ;1111_1100
                    JUMP display_leds
    light_up_five:
                    LOAD s0, F8     ;1111_1000
                    JUMP display_leds
    light_up_four:
                    LOAD s0, F0     ;1111_0000
                    JUMP display_leds
    light_up_three:
                    LOAD s0, E0     ;1110_0000
                    JUMP display_leds
    light_up_two:
                    LOAD s0, C0     ;1100_0000
                    JUMP display_leds
    light_up_one:
                    LOAD s0, 80     ;1000_0000
                    JUMP display_leds

                    
                    
     display_leds:  
                    OUTPUT s0, LED_port                 ;display the LEDs
                    LOAD s1, 00                         ;reset the sum of data
                    STORE s1, hold_sum
                    LOAD s3, 00                         ;reset the carry
                    STORE s3, hold_carry
                    FETCH s0, ISR_preserve_s0           ;restore register
                    FETCH s1, ISR_preserve_s1           ;restore the sum
                    FETCH s2, ISR_preserve_s2           ;restore register
                    FETCH s3, ISR_preserve_s3           ;restore the carry
                    RETURNI ENABLE
                    ;
                    ;
                    ;**************************************************************************************
                    ; Interrupt Vector
                    ;**************************************************************************************
                    ;
                    ADDRESS 3FF
                    JUMP ISR
                    ;
                    ;
