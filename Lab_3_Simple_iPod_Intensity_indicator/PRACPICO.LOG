KCPSM3 Assembler log file for program 'pracpico.psm'.
Generated by KCPSM3 version 1.30
Ken Chapman (Xilinx Ltd) 2005.
27Feb2021-10:12:58

 Addr Code

 000                            ; KCPSM3 Program - Practice Picoblaze on Spartan-3A Starter Kit.
 000                            ;
 000                            ;
 000                            ;
 000                            ;
 000                            ; The 8 LEDs provide a simple 'heart beat' counter driven by interrupts generated at
 000                            ; one second intervals.
 000                            ;
 000                            ;
 000                            ;**************************************************************************************
 000                            ; Port definitions
 000                            ;**************************************************************************************
 000                            ;
 000                            ;
 000                            ;
 000                            CONSTANT LED_port, 80               ;8 simple LEDs. Is an OUTPUT port.
 000                            CONSTANT DATA_IN_PORT, 00           ;input data port. this is an INPUT port.
 000                            CONSTANT SSEG_PORT0, 40
 000                            CONSTANT SSEG_PORT1, 20
 000                            CONSTANT SSEG_PORT2, 10
 000                            ;//////define the port for the LED[0]
 000                            CONSTANT LED_heartbeat, 08
 000                            ;**************************************************************************************
 000                            ; Special Register usage
 000                            ;**************************************************************************************
 000                            ;
 000                            ; No registers are given special names in this program.
 000                            ;
 000                            ;**************************************************************************************
 000                            ; Scratch Pad Memory Locations
 000                            ;**************************************************************************************
 000                            ;
 000                            ;
 000                            CONSTANT ISR_preserve_s0, 00        ;Preserve s0 contents during ISR
 000                            CONSTANT ISR_preserve_s1, 01        ;Preserve s1 contents during ISR
 000                            CONSTANT ISR_preserve_s2, 02        ;Preserve s2 contents during ISR
 000                            CONSTANT ISR_preserve_s3, 03        ;Preserve s3 contents during ISR
 000                            ;
 000                            CONSTANT LED_pattern, 04            ;remember state of LEDs (8-bit counter in this case)
 000                            CONSTANT counter, 05
 000                            CONSTANT hold_carry, 06
 000                            CONSTANT hold_sum, 07
 000                            ;
 000                            ;**************************************************************************************
 000                            ; Useful data constants
 000                            ;**************************************************************************************
 000                            ;
 000                            ;
 000                            ; Constant to define a software delay of 1us. This must be adjusted to reflect the
 000                            ; clock applied to KCPSM3. Every instruction executes in 2 clock cycles making the
 000                            ; calculation highly predictable. The '6' in the following equation even allows for
 000                            ; 'CALL delay_1us' instruction in the initiating code.
 000                            ;
 000                            ; delay_1us_constant =  (clock_rate - 6)/4       Where 'clock_rate' is in MHz
 000                            ;
 000                            ; Example: For a 50MHz clock the constant value is (50-6)/4 = 11  (0B Hex).
 000                            ; For clock rates below 10MHz the value of 1 must be used and the operation will
 000                            ; become lower than intended. Interrupts may effect the timing of software based
 000                            ; delays.
 000                            ;
 000                            CONSTANT delay_1us_constant, 0B
 000                            ;
 000                            ;
 000                            ;
 000                            ; ASCII table
 000                            ;
 000                            CONSTANT character_a, 61
 000                            CONSTANT character_b, 62
 000                            CONSTANT character_c, 63
 000                            CONSTANT character_d, 64
 000                            CONSTANT character_e, 65
 000                            CONSTANT character_f, 66
 000                            CONSTANT character_g, 67
 000                            CONSTANT character_h, 68
 000                            CONSTANT character_i, 69
 000                            CONSTANT character_j, 6A
 000                            CONSTANT character_k, 6B
 000                            CONSTANT character_l, 6C
 000                            CONSTANT character_m, 6D
 000                            CONSTANT character_n, 6E
 000                            CONSTANT character_o, 6F
 000                            CONSTANT character_p, 70
 000                            CONSTANT character_q, 71
 000                            CONSTANT character_r, 72
 000                            CONSTANT character_s, 73
 000                            CONSTANT character_t, 74
 000                            CONSTANT character_u, 75
 000                            CONSTANT character_v, 76
 000                            CONSTANT character_w, 77
 000                            CONSTANT character_x, 78
 000                            CONSTANT character_y, 79
 000                            CONSTANT character_z, 7A
 000                            CONSTANT character_A, 41
 000                            CONSTANT character_B, 42
 000                            CONSTANT character_C, 43
 000                            CONSTANT character_D, 44
 000                            CONSTANT character_E, 45
 000                            CONSTANT character_F, 46
 000                            CONSTANT character_G, 47
 000                            CONSTANT character_H, 48
 000                            CONSTANT character_I, 49
 000                            CONSTANT character_J, 4A
 000                            CONSTANT character_K, 4B
 000                            CONSTANT character_L, 4C
 000                            CONSTANT character_M, 4D
 000                            CONSTANT character_N, 4E
 000                            CONSTANT character_O, 4F
 000                            CONSTANT character_P, 50
 000                            CONSTANT character_Q, 51
 000                            CONSTANT character_R, 52
 000                            CONSTANT character_S, 53
 000                            CONSTANT character_T, 54
 000                            CONSTANT character_U, 55
 000                            CONSTANT character_V, 56
 000                            CONSTANT character_W, 57
 000                            CONSTANT character_X, 58
 000                            CONSTANT character_Y, 59
 000                            CONSTANT character_Z, 5A
 000                            CONSTANT character_0, 30
 000                            CONSTANT character_1, 31
 000                            CONSTANT character_2, 32
 000                            CONSTANT character_3, 33
 000                            CONSTANT character_4, 34
 000                            CONSTANT character_5, 35
 000                            CONSTANT character_6, 36
 000                            CONSTANT character_7, 37
 000                            CONSTANT character_8, 38
 000                            CONSTANT character_9, 39
 000                            CONSTANT character_colon, 3A
 000                            CONSTANT character_stop, 2E
 000                            CONSTANT character_semi_colon, 3B
 000                            CONSTANT character_minus, 2D
 000                            CONSTANT character_divide, 2F       ;'/'
 000                            CONSTANT character_plus, 2B
 000                            CONSTANT character_comma, 2C
 000                            CONSTANT character_less_than, 3C
 000                            CONSTANT character_greater_than, 3E
 000                            CONSTANT character_equals, 3D
 000                            CONSTANT character_space, 20
 000                            CONSTANT character_CR, 0D           ;carriage return
 000                            CONSTANT character_question, 3F     ;'?'
 000                            CONSTANT character_dollar, 24
 000                            CONSTANT character_exclaim, 21      ;'!'
 000                            CONSTANT character_BS, 08           ;Back Space command character
 000                            ;
 000                            ;
 000                            ;
 000                            ;
 000                            ;
 000                            ;**************************************************************************************
 000                            ; Initialise the system
 000                            ;**************************************************************************************
 000                            ;
 000  00000         cold_start: LOAD s0, 00
 001  2E004                     STORE s0, LED_pattern[04]
 002  2C080                     OUTPUT s0, LED_port[80]
 003  3C001                     ENABLE INTERRUPT                    ;enable the interrupt
 004                            ;**************************************************************************************
 004                            ; Main program
 004                            ;**************************************************************************************
 004                            ;
 004                            ; Display welcome message for design
 004                            ;
 004  30034       main_program: CALL delay_1s[034]                  ;
 005                            ;Make the heart-beat on LED[0]
 005  00001                     LOAD s0, 01
 006  2C008                     OUTPUT s0, LED_heartbeat[08]
 007  30034                     CALL delay_1s[034]
 008  00000                     LOAD s0, 00
 009  2C008                     OUTPUT s0, LED_heartbeat[08]
 00A  34004                     JUMP main_program[004]
 00B                            ;**************************************************************************************
 00B                            ; Routines to display hexadecimal values
 00B                            ;**************************************************************************************
 00B                            ;
 00B                            ;
 00B                            ; Convert hexadecimal value provided in register s0 into ASCII characters
 00B                            ;
 00B                            ; The value provided must can be any value in the range 00 to FF and will be converted into
 00B                            ; two ASCII characters.
 00B                            ;     The upper nibble will be represented by an ASCII character returned in register s3.
 00B                            ;     The lower nibble will be represented by an ASCII character returned in register s2.
 00B                            ;
 00B                            ; The ASCII representations of '0' to '9' are 30 to 39 hexadecimal which is simply 30 hex
 00B                            ; added to the actual decimal value. The ASCII representations of 'A' to 'F' are 41 to 46
 00B                            ; hexadecimal requiring a further addition of 07 to the 30 already added.
 00B                            ;
 00B                            ; Registers used s0, s2 and s3.
 00B                            ;
 00B  01200  hex_byte_to_ASCII: LOAD s2, s0                         ;remember value supplied
 00C  2000E                     SR0 s0                              ;isolate upper nibble
 00D  2000E                     SR0 s0
 00E  2000E                     SR0 s0
 00F  2000E                     SR0 s0
 010  30017                     CALL hex_to_ASCII[017]              ;convert
 011  01300                     LOAD s3, s0                         ;upper nibble value in s3
 012  01020                     LOAD s0, s2                         ;restore complete value
 013  0A00F                     AND s0, 0F                          ;isolate lower nibble
 014  30017                     CALL hex_to_ASCII[017]              ;convert
 015  01200                     LOAD s2, s0                         ;lower nibble value in s2
 016  2A000                     RETURN
 017                            ;
 017                            ; Convert hexadecimal value provided in register s0 into ASCII character
 017                            ;
 017                            ;Register used s0
 017                            ;
 017  1C00A       hex_to_ASCII: SUB s0, 0A                          ;test if value is in range 0 to 9
 018  3581A                     JUMP C, number_char[01A]
 019  18007                     ADD s0, 07                          ;ASCII char A to F in range 41 to 46
 01A  1803A        number_char: ADD s0, 3A                          ;ASCII char 0 to 9 in range 30 to 40
 01B  2A000                     RETURN
 01C                            ;**************************************************************************************
 01C                            ; Software delay routines
 01C                            ;**************************************************************************************
 01C                            ;
 01C                            ; Delay of 1us.
 01C                            ;
 01C                            ; Constant value 'delay_1us_constant' reflects the clock applied to KCPSM3. Every
 01C                            ; instruction executes in 2 clock cycles making the calculation highly predictable.
 01C                            ; The '6' in the following equation allows for the 'CALL delay_1us' instruction used
 01C                            ; in the initiating code. Interrupts may effect software derived delays.
 01C                            ;
 01C                            ; delay_1us_constant =  (clock_rate - 6)/4       Where 'clock_rate' is in MHz
 01C                            ;
 01C                            ; Registers used s0
 01C                            ;
 01C  0000B          delay_1us: LOAD s0, delay_1us_constant[0B]
 01D  1C001           wait_1us: SUB s0, 01
 01E  3541D                     JUMP NZ, wait_1us[01D]
 01F  2A000                     RETURN
 020                            ;
 020                            ; Delay of 40us.
 020                            ;
 020                            ; Registers used s0, s1
 020                            ;
 020  00128         delay_40us: LOAD s1, 28                         ;40 x 1us = 40us
 021  3001C          wait_40us: CALL delay_1us[01C]
 022  1C101                     SUB s1, 01
 023  35421                     JUMP NZ, wait_40us[021]
 024  2A000                     RETURN
 025                            ;
 025                            ;
 025                            ; Delay of 1ms.
 025                            ;
 025                            ; Registers used s0, s1, s2
 025                            ;
 025  00219          delay_1ms: LOAD s2, 19                         ;25 x 40us = 1ms
 026  30020           wait_1ms: CALL delay_40us[020]
 027  1C201                     SUB s2, 01
 028  35426                     JUMP NZ, wait_1ms[026]
 029  2A000                     RETURN
 02A                            ;
 02A                            ; Delay of 20ms.
 02A                            ;
 02A                            ; Delay of 20ms used during initialisation.
 02A                            ;
 02A                            ; Registers used s0, s1, s2, s3
 02A                            ;
 02A  00314         delay_20ms: LOAD s3, 14                         ;20 x 1ms = 20ms
 02B  30025          wait_20ms: CALL delay_1ms[025]
 02C  1C301                     SUB s3, 01
 02D  3542B                     JUMP NZ, wait_20ms[02B]
 02E  2A000                     RETURN
 02F  00364        delay_100ms: LOAD s3, 64                         ;100 x 1ms = 20ms
 030  30025         wait_100ms: CALL delay_1ms[025]
 031  1C301                     SUB s3, 01
 032  35430                     JUMP NZ, wait_100ms[030]
 033  2A000                     RETURN
 034                            ;
 034                            ; Delay of approximately 1 second.
 034                            ;
 034                            ; Registers used s0, s1, s2, s3, s4
 034                            ;
 034  00432           delay_1s: LOAD s4, 32                         ;50 x 20ms = 1000ms
 035  3002A            wait_1s: CALL delay_20ms[02A]
 036  1C401                     SUB s4, 01
 037  35435                     JUMP NZ, wait_1s[035]
 038  2A000                     RETURN
 039                            ;
 039                            ;
 039                            ;
 039                            ;**************************************************************************************
 039                            ; Interrupt Service Routine (ISR)
 039                            ;**************************************************************************************
 039                            ;
 039                            ; The interrupt is used purely to provide a 1 second heart beat binary counter pattern
 039                            ; on the 8 LEDs.
 039                            ;
 039  2E000                ISR: STORE s0, ISR_preserve_s0[00]
 03A  2E101                     STORE s1, ISR_preserve_s1[01]       ;preserve register for the sum
 03B  2E202                     STORE s2, ISR_preserve_s2[02]       ;preserve register for audio_data+
 03C                            ;s3 is the second register that handles the carry 8 bits of the sum of the audio data
 03C  2E303                     STORE s3, ISR_preserve_s3[03]       ;preserve register for audio_data carry
 03D  06107                     FETCH s1, hold_sum[07]              ; get the stored sum_data value
 03E  06306                     FETCH s3, hold_carry[06]            ; get the stored carry value
 03F  04200              while: INPUT s2, DATA_IN_PORT[00]
 040  01720                     LOAD s7, s2
 041  0A780                     AND s7, 80                          ; check the if the most significant bit is 1
 042  14780                     COMPARE s7, 80
 043  31051                     CALL Z, find_absolute[051]          ; if MSB is 1, it is an negative data
 044  19120                     ADD s1, s2                          ;add the data_audio to sum
 045  1A300                     ADDCY s3, 00                        ;the carry bits
 046  145FF                     COMPARE s5, FF                      ;check if counter is d'256
 047  35054                     JUMP Z, end_loop[054]
 048  18501                     ADD s5, 01                          ;start counting
 049  2E000      end_interrupt: STORE s0, ISR_preserve_s0[00]
 04A  2E107                     STORE s1, hold_sum[07]
 04B  2E306                     STORE s3, hold_carry[06]
 04C  06000                     FETCH s0, ISR_preserve_s0[00]
 04D  06101                     FETCH s1, ISR_preserve_s1[01]
 04E  06202                     FETCH s2, ISR_preserve_s2[02]
 04F  06303                     FETCH s3, ISR_preserve_s3[03]
 050  38001                     RETURNI ENABLE
 051  0E2FF      find_absolute: XOR s2, FF
 052  18201                     ADD s2, 01
 053  2A000                     RETURN
 054  00500           end_loop: LOAD s5, 00                         ;initialize the counter
 055                            ;Since s3 is the UPPER 8 bits of the sum, so we only need to compare s3. Becasue
 055                            ;divided by 256 means shift 8 bits RIGHT
 055  14380                     COMPARE s3, 80                      ; compare with 1000_0000
 056  35C67                     JUMP NC, light_up_eight[067]
 057  14340                     COMPARE s3, 40                      ; compare with 0100_0000
 058  35C69                     JUMP NC, light_up_seven[069]
 059  14320                     COMPARE s3, 20                      ; compare with 0010_0000
 05A  35C6B                     JUMP NC, light_up_six[06B]
 05B  14310                     COMPARE s3, 10                      ; compare with 0001_0000
 05C  35C6D                     JUMP NC, light_up_five[06D]
 05D  14308                     COMPARE s3, 08                      ; compare with 0000_1000
 05E  35C6F                     JUMP NC, light_up_four[06F]
 05F  14304                     COMPARE s3, 04                      ; compare with 0000_0100
 060  35C71                     JUMP NC, light_up_three[071]
 061  14302                     COMPARE s3, 02                      ; compare with 0000_0010
 062  35C73                     JUMP NC, light_up_two[073]
 063  14301                     COMPARE s3, 01                      ; compare with 0000_0001
 064  35075                     JUMP Z, light_up_one[075]
 065  00000                     LOAD s0, 00
 066  34077                     JUMP display_leds[077]
 067            light_up_eight: 
 067  000FF                     LOAD s0, FF                         ;1111_1111
 068  34077                     JUMP display_leds[077]
 069            light_up_seven: 
 069  000FE                     LOAD s0, FE                         ;1111_1110
 06A  34077                     JUMP display_leds[077]
 06B              light_up_six: 
 06B  000FC                     LOAD s0, FC                         ;1111_1100
 06C  34077                     JUMP display_leds[077]
 06D             light_up_five: 
 06D  000F8                     LOAD s0, F8                         ;1111_1000
 06E  34077                     JUMP display_leds[077]
 06F             light_up_four: 
 06F  000F0                     LOAD s0, F0                         ;1111_0000
 070  34077                     JUMP display_leds[077]
 071            light_up_three: 
 071  000E0                     LOAD s0, E0                         ;1110_0000
 072  34077                     JUMP display_leds[077]
 073              light_up_two: 
 073  000C0                     LOAD s0, C0                         ;1100_0000
 074  34077                     JUMP display_leds[077]
 075              light_up_one: 
 075  00080                     LOAD s0, 80                         ;1000_0000
 076  34077                     JUMP display_leds[077]
 077              display_leds: 
 077  2C080                     OUTPUT s0, LED_port[80]             ;display the LEDs
 078  00100                     LOAD s1, 00                         ;reset the sum of data
 079  2E107                     STORE s1, hold_sum[07]
 07A  00300                     LOAD s3, 00                         ;reset the carry
 07B  2E306                     STORE s3, hold_carry[06]
 07C  06000                     FETCH s0, ISR_preserve_s0[00]       ;restore register
 07D  06101                     FETCH s1, ISR_preserve_s1[01]       ;restore the sum
 07E  06202                     FETCH s2, ISR_preserve_s2[02]       ;restore register
 07F  06303                     FETCH s3, ISR_preserve_s3[03]       ;restore the carry
 080  38001                     RETURNI ENABLE
 081                            ;
 081                            ;
 081                            ;**************************************************************************************
 081                            ; Interrupt Vector
 081                            ;**************************************************************************************
 081                            ;
 3FF                            ADDRESS 3FF
 3FF  34039                     JUMP ISR[039]
 3FF                            ;
 3FF                            ;
